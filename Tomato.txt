class Tomato:
    states = {0: 'nothing', 1: 'flower', 2: 'green_tomato', 3: 'red_tomato'}

    def __init__(self, index):
        self._index = index
        self._state = 0

    def grow(self):
        self._change_state()

    def is_ripe(self):
        if self._state == 3:
            return True
            print("Помидоры Созрели")
        return False

    def _change_state(self):
        if self._state < 3:
            self._state += 1


class TomatoBush:

    def __init__(self, num):
        self.tomatoes = [Tomato(index) for index in range(0, num)]

    def grow_all(self):
        for tomato in self.tomatoes:
            tomato.grow()

    def all_are_ripe(self):
        return all([tomato.is_ripe() for tomato in self.tomatoes])

    def give_away_all(self):
        self.tomatoes = []


class Gardener:

    def __init__(self, name, plant):
        self.name = name
        self._plant = plant

    def work(self):
        print('Работа идет')
        self._plant.grow_all()
        print('Работа окончена')

    def harvest(self):

        if self._plant.all_are_ripe():
            self._plant.give_away_all()
            print("Помидоры созрели")
        else:
            print('Помидоры еще не созрели')

    @staticmethod
    def knowledge_base():
        print("Помидоры нужно собирать когда они имеют красный цвет")


Gardener.knowledge_base()

tomato_bush = TomatoBush(3)
gardener = Gardener("Petr", tomato_bush)
gardener.work()
gardener.harvest()
gardener.work()
gardener.harvest()
gardener.work()
gardener.harvest()


